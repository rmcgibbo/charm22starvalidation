#!/usr/bin/env python

import os
import sys
import subprocess
import numpy as np
from simtk import unit
from simtk.openmm import app
import distutils
DESMOND_PATH = distutils.spawn.find_executable('desmond')
if DESMOND_PATH is None:
    raise ValueError('Could not find desmond in your path')

sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', 'lib'))
from tempdir import temporary_directory
sys.path.insert(0, os.path.join(os.path.dirname(DESMOND_PATH), '..', 'lib', 'python'))
import framesettools


#-------------------------------------------------------------------------------
# GLOBALS
#-------------------------------------------------------------------------------
CUTOFF = 20*unit.angstroms

call = lambda cmd: subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
call = lambda cmd: os.system(cmd)
#-------------------------------------------------------------------------------


def main():
    if len(sys.argv) != 3:
        print >> sys.stderr, 'usage: %s gro_fn forces_fn' % sys.argv[0]
        exit(1)
    _, gro_fn, forces_fn = sys.argv
    gro_fn = os.path.abspath(gro_fn)

    with temporary_directory():
        call('editconf -f %s -o conf.pdb' % gro_fn)
        canonicalize_pdb('conf.pdb')
        call('viparr conf.pdb conf.dms -f charmm22star_aminoacids --without-constraints')

        with open('desmond.cfg', 'w') as f:
            f.write(DESMONDCFG)
        call('desmond --include desmond.cfg --cfg boot.file=conf.dms')

        fframe = [f for f in framesettools.FrameSet('forces.dtr')][0]
        tframe = [f for f in framesettools.FrameSet('trajectory.dtr')][0]
        forces = unit.Quantity(fframe.FORCES.reshape(-1, 3), unit.kilocalories_per_mole/unit.angstrom)
        positions = unit.Quantity(tframe.POSITION.reshape(-1,3), unit.angstroms)

        p1 = positions.value_in_unit(unit.angstroms)
        p2 = app.GromacsGroFile(gro_fn).positions.value_in_unit(unit.angstroms)
        diff = (p1 - np.mean(p1, axis=0)) - (p2 - np.mean(p2, axis=0))
        #p2 - np.mean(p2, axis=0)
        #diff = positions.value_in_unit(unit.angstroms) - app.GromacsGroFile(gro_fn).positions.value_in_unit(unit.angstroms)
        rmsd = np.sqrt(np.mean(np.sum(np.square(diff), axis=1)))
    
    forces = forces.value_in_unit(unit.kilojoule_per_mole/unit.nanometer)
    print 'RMSD Between gro and Desmond conf: %f A' % rmsd
    np.savetxt(forces_fn, forces)


def canonicalize_pdb(pdb_fn):
    pdb = app.PDBFile(pdb_fn)
    with open(pdb_fn, 'w') as f:
        app.PDBFile.writeFile(pdb.topology, pdb.positions, f)

DESMONDCFG = """
app = mdsim

mdsim = {
  title = "Compute Forces"
  last_time = 0.000
}

global_cell={
  reference_time=0.0
  partition = [ 0 0 0 ]
  margin = 0
  r_clone = %(clone)s
}

force = {
  term.list = []

  bonded = {}
  virtual = {}
  constraint = none

  nonbonded = {
    sigma = %(sigma)s
    r_cut = %(cutoff)s
    n_zone = 1

    near = {
      type = default
      taper = none
    }
    far = {
      type = pme
      order = [4 4 4]
      n_k = [128 128 128] 
    }
  }  
  ignore_com_dofs=false
}

migration={first = 0.0
           interval = 0.02}

integrator = {
  type = V_NVE

  dt = 0.002

  respa = {
    near_timesteps = 2
    far_timesteps = 2
    outer_timesteps = 2
  }
  V_NVE = {}
}

mdsim {
    plugin = { list = [ compute_forces trajectory ]
    compute_forces = { type=compute_forces
                       name = forces.dtr
                       mode = clobber
                       first = 0
                       interval = 0.04
		       		     }
    trajectory = { type=trajectory
                   first = 0
                   interval = 0.04
                   mode = clobber
                   write_velocity  = false
                   write_last_step = false
                   periodicfix  = false
                   glue = []
                   center = []
                   name = trajectory.dtr
                 }
  }
  checkpt = none
}
""" % {'cutoff': CUTOFF.value_in_unit(unit.angstroms),
       'clone': CUTOFF.value_in_unit(unit.angstroms)/2,
       'sigma': CUTOFF.value_in_unit(unit.angstroms)/(3*np.sqrt(2))}


if __name__ == '__main__':
    main()
# set the box size to 50 nm
#dms-set conf.dms  conf.dms box.d=50
#desmond --include data/desmondsim.cfg --cfg boot.file=conf.dms
