#!/usr/bin/env python

import os
import sys
import numpy as np
from simtk import unit
from simtk import openmm as mm
from simtk.openmm import app
sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', 'lib'))
from tempdir import temporary_directory
from dmsfile import DesmondDMSFile

#---------------------------------------------------------
call = lambda cmd: os.system(cmd)
#---------------------------------------------------------

def main():
    if len(sys.argv) != 3:
        print >> sys.stderr, 'usage %s gro_fn, force_fn' % sys.argv[0]
        exit(1)
    _, gro_fn, force_fn = sys.argv
    gro_fn = os.path.abspath(gro_fn)

    with temporary_directory():
        call('editconf -f %s -o conf.pdb' % gro_fn)
        canonicalize_pdb('conf.pdb')
        call('viparr conf.pdb conf.dms -f charmm22star_aminoacids -f tip3p_charmm --without-constraints')
        dms = DesmondDMSFile('conf.dms')

    system = dms.createSystem(nonbondedMethod=app.PME,
                              nonbondedCutoff=20*unit.angstroms)
    context = mm.Context(system, mm.VerletIntegrator(0))
    context.setPositions(dms.positions)
    state = context.getState(getForces=True)
    forces = state.getForces(asNumpy=True).value_in_unit(unit.kilojoule_per_mole/unit.nanometers)

    np.savetxt(force_fn, forces)


def canonicalize_pdb(pdb_fn):
    pdb = app.PDBFile(pdb_fn)
    with open(pdb_fn, 'w') as f:
        app.PDBFile.writeFile(pdb.topology, pdb.positions, f)

if __name__ == '__main__':
    main()
